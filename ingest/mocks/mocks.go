// Code generated by MockGen. DO NOT EDIT.
// Source: ../types.go

// Package mock_ingest is a generated GoMock package.
package mock_ingest

import (
	reflect "reflect"

	imap "github.com/emersion/go-imap"
	gomock "github.com/golang/mock/gomock"
	ingest "github.com/vs49688/mailpump/ingest"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Closed mocks base method.
func (m *MockClient) Closed() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockClientMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockClient)(nil).Closed))
}

// IngestMessage mocks base method.
func (m *MockClient) IngestMessage(msg *imap.Message, ch chan<- ingest.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestMessage", msg, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestMessage indicates an expected call of IngestMessage.
func (mr *MockClientMockRecorder) IngestMessage(msg, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestMessage", reflect.TypeOf((*MockClient)(nil).IngestMessage), msg, ch)
}

// IngestMessageSync mocks base method.
func (m *MockClient) IngestMessageSync(msg *imap.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestMessageSync", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestMessageSync indicates an expected call of IngestMessageSync.
func (mr *MockClientMockRecorder) IngestMessageSync(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestMessageSync", reflect.TypeOf((*MockClient)(nil).IngestMessageSync), msg)
}
